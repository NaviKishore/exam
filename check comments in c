#include <stdio.h>
#include <string.h>

// Function to check if a line is a single-line comment
int isSingleLineComment(char *line) {
    int i = 0;
    while (line[i] != '\0') {
        if (line[i] == '/' && line[i + 1] == '/') {
            return 1;
        }
        i++;
    }
    return 0;
}

// Function to check if a line is a multi-line comment
int isMultiLineComment(char *line) {
    int i = 0;
    while (line[i] != '\0') {
        if (line[i] == '/' && line[i + 1] == '*') {
            return 1;
        }
        i++;
    }
    return 0;
}

// Function to determine if a line contains both /* and */ indicating it is a comment
int isMultiLineCommentEnd(char *line) {
    int i = 0;
    while (line[i] != '\0') {
        if (line[i] == '*' && line[i + 1] == '/') {
            return 1;
        }
        i++;
    }
    return 0;
}

// Function to analyze the input line
void analyzeLine(char *line) {
    if (isSingleLineComment(line)) {
        printf("Single-line Comment: %s\n", line);
    } else if (isMultiLineComment(line)) {
        printf("Multi-line Comment Start: %s\n", line);
        // If line starts a multi-line comment, but also ends it
        if (isMultiLineCommentEnd(line)) {
            printf("Multi-line Comment End: %s\n", line);
        }
    } else {
        printf("Not a Comment: %s\n", line);
    }
}

int main() {
    char line1[] = "int main() { // This is a single-line comment";
    char line2[] = "/* This is a multi-line comment";
    char line3[] = "This is not a comment";
    char line4[] = "This is the end of the multi-line comment */";
    
    analyzeLine(line1);
    analyzeLine(line2);
    analyzeLine(line3);
    analyzeLine(line4);

    return 0;
}
