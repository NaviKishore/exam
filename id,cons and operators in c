#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define MAX_IDENTIFIER_LENGTH 30

// Token types
typedef enum {
    TOKEN_IDENTIFIER,
    TOKEN_CONSTANT,
    TOKEN_OPERATOR
} TokenType;

// Function to check if a character is an operator
int isOperator(char ch) {
    char operators[] = "+-*/=";
    for (int i = 0; operators[i] != '\0'; i++) {
        if (ch == operators[i]) {
            return 1;
        }
    }
    return 0;
}

// Function to process identifiers
void processIdentifier(char *buffer) {
    printf("Identifier: %s\n", buffer);
}

// Function to process constants
void processConstant(char *buffer) {
    printf("Constant: %s\n", buffer);
}

// Function to process operators
void processOperator(char op) {
    printf("Operator: %c\n", op);
}

// Function to analyze the input
void analyzeInput(char *input) {
    char buffer[MAX_IDENTIFIER_LENGTH];
    int bufferIndex = 0;

    for (int i = 0; input[i] != '\0'; i++) {
        // Ignore whitespace characters
        if (isspace(input[i])) {
            continue;
        }
        // Ignore comments starting with '//'
        if (input[i] == '/' && input[i + 1] == '/') {
            break;
        }
        // If it's an operator
        if (isOperator(input[i])) {
            processOperator(input[i]);
        }
        // If it's a letter, it might be the start of an identifier
        else if (isalpha(input[i])) {
            bufferIndex = 0;
            while (isalnum(input[i]) || input[i] == '_') {
                if (bufferIndex < MAX_IDENTIFIER_LENGTH - 1) {
                    buffer[bufferIndex++] = input[i++];
                } else {
                    break;
                }
            }
            buffer[bufferIndex] = '\0';
            processIdentifier(buffer);
            i--; // Move back one position to reprocess the character
        }
        // If it's a digit, it might be the start of a constant
        else if (isdigit(input[i])) {
            bufferIndex = 0;
            while (isdigit(input[i])) {
                if (bufferIndex < MAX_IDENTIFIER_LENGTH - 1) {
                    buffer[bufferIndex++] = input[i++];
                } else {
                    break;
                }
            }
            buffer[bufferIndex] = '\0';
            processConstant(buffer);
            i--; // Move back one position to reprocess the character
        }
    }
}

int main() {
    char input[] = "int main() {\n\tint a = 5;\n\tint b = 10;\n\tint result = a + b;\n\treturn 0;\n}";
    analyzeInput(input);
    return 0;
}
